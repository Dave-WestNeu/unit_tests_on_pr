# .github/workflows/handle-repository-setup.yml
name: Handle Repository Setup Request

on:
  issues:
    types: [opened, reopened]
  workflow_dispatch:
    inputs:
      target_repo:
        description: "Target Repository"
        required: true
      target_branch:
        description: "Target Branch"
        required: true
        default: "main"

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  setup-repository:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || contains(github.event.issue.labels.*.name, 'repository-setup')

    steps:
      - name: Checkout source repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2

      - name: Parse issue data
        id: parse-issue
        if: github.event_name != 'workflow_dispatch'
        shell: bash
        run: |
          # Parse the issue body safely
          issue_body="${{ github.event.issue.body }}"

          # Extract target repository (required)
          target_repo=$(echo "$issue_body" | grep -A1 "### Target Repository" | tail -1 | xargs || echo "")

          # Extract target branch (optional)
          target_branch=$(echo "$issue_body" | grep -A1 "### Target Branch" | tail -1 | xargs || echo "")

          # Validate required fields
          if [ -z "$target_repo" ] || [ "$target_repo" = "_No response_" ]; then
            echo "‚ùå Target repository is required"
            exit 1
          fi

          echo "target_repo=$target_repo" >> $GITHUB_OUTPUT
          echo "target_branch=$target_branch" >> $GITHUB_OUTPUT

      - name: Assign issue to Copilot
        if: github.event_name != 'workflow_dispatch'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue edit ${{ github.event.issue.number }} \
            --repo ${{ github.repository }} \
            --add-assignee copilot || echo "‚ö†Ô∏è Could not assign to Copilot (may not be a collaborator)"

      - name: Set variables and validate
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TARGET_REPO="${{ github.event.inputs.target_repo }}"
            TARGET_BRANCH="${{ github.event.inputs.target_branch }}"
          else
            TARGET_REPO="${{ steps.parse-issue.outputs.target_repo }}"
            TARGET_BRANCH="${{ steps.parse-issue.outputs.target_branch }}"
          fi

          # Validate repository format
          if [[ ! "$TARGET_REPO" =~ ^[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+$ ]]; then
            echo "‚ùå Invalid repository format. Use: owner/repo-name"
            exit 1
          fi

          # Set default branch if empty
          if [ -z "$TARGET_BRANCH" ] || [ "$TARGET_BRANCH" = "_No response_" ]; then
            TARGET_BRANCH="main"
          fi

          echo "TARGET_REPO=$TARGET_REPO" >> $GITHUB_ENV
          echo "TARGET_BRANCH=$TARGET_BRANCH" >> $GITHUB_ENV

          echo "‚úÖ Target: $TARGET_REPO (branch: $TARGET_BRANCH)"

      - name: Generate GitHub App Token
        id: generate-token
        uses: actions/create-github-app-token@31662d64faa4bf014ba2066b4c75bb6b5e6c0898 #v1.11.0
        with:
          app-id: ${{ secrets.UNIT_TEST_APP_ID }}
          private-key: ${{ secrets.UNIT_TEST_APP_KEY }}
          owner: ${{ env.TARGET_REPO }}

      - name: Auto-detect repository settings
        shell: bash
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
          TARGET_REPO: ${{ env.TARGET_REPO }}
          TARGET_BRANCH: ${{ env.TARGET_BRANCH }}
        run: |
          echo "üîç Auto-detecting repository settings..."

          # Verify repository access and get default branch if needed
          repo_info=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$TARGET_REPO" || echo "{}")

          if echo "$repo_info" | grep -q '"message": "Not Found"'; then
            echo "‚ùå Repository $TARGET_REPO not found or not accessible"
            exit 1
          fi

          # Use default branch if target branch wasn't specified
          if [ "$TARGET_BRANCH" = "main" ]; then
            default_branch=$(echo "$repo_info" | jq -r '.default_branch // "main"')
            if [ "$default_branch" != "null" ] && [ "$default_branch" != "main" ]; then
              TARGET_BRANCH="$default_branch"
              echo "TARGET_BRANCH=$TARGET_BRANCH" >> $GITHUB_ENV
              echo "üìù Using repository default branch: $TARGET_BRANCH"
            fi
          fi

          # Auto-detect languages from GitHub's language detection
          languages_json=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$TARGET_REPO/languages" || echo "{}")

          # Convert GitHub languages to our supported languages
          detected_languages=""
          if echo "$languages_json" | jq -e 'has("C#")' > /dev/null 2>&1; then
            detected_languages="$detected_languages,csharp"
          fi
          if echo "$languages_json" | jq -e 'has("Java")' > /dev/null 2>&1; then
            detected_languages="$detected_languages,java"
          fi
          if echo "$languages_json" | jq -e 'has("JavaScript")' > /dev/null 2>&1; then
            detected_languages="$detected_languages,javascript"
          fi
          if echo "$languages_json" | jq -e 'has("TypeScript")' > /dev/null 2>&1; then
            detected_languages="$detected_languages,typescript"
          fi
          if echo "$languages_json" | jq -e 'has("Python")' > /dev/null 2>&1; then
            detected_languages="$detected_languages,python"
          fi

          # Remove leading comma and set default if no languages detected
          detected_languages=$(echo "$detected_languages" | sed 's/^,//')
          if [ -z "$detected_languages" ]; then
            detected_languages="javascript"
            echo "‚ö†Ô∏è No supported languages detected, defaulting to JavaScript"
          fi

          echo "DETECTED_LANGUAGES=$detected_languages" >> $GITHUB_ENV
          echo "‚úÖ Detected languages: $detected_languages"

      - name: Checkout target repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
        with:
          repository: ${{ env.TARGET_REPO }}
          token: ${{ steps.generate-token.outputs.token }}
          ref: ${{ env.TARGET_BRANCH }}
          path: target_repo

      - name: Setup Node.js
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af #v4.1.0
        with:
          node-version: '20'

      - name: Install dependencies
        shell: bash
        run: |
          npm install js-yaml

      - name: Generate configuration files
        shell: bash
        env:
          DETECTED_LANGUAGES: ${{ env.DETECTED_LANGUAGES }}
          TARGET_REPO: ${{ env.TARGET_REPO }}
        run: |
          echo "üìù Generating configuration files..."

          # Create directories
          mkdir -p target_repo/.github/workflows
          mkdir -p target_repo/.github/scripts
          mkdir -p target_repo/.github/ISSUE_TEMPLATE

          # Generate unit-test-generator.yml using Node.js
          node << 'EOF'
          const fs = require('fs');
          const yaml = require('js-yaml');
          
          const languages = process.env.DETECTED_LANGUAGES.split(',').map(l => l.trim());
          
          // Language configurations
          const languageConfigs = {
            'csharp': {
              framework: "xunit",
              file_extensions: [".cs"],
              test_directory: "Tests",
              test_suffix: ".Tests.cs",
              exclude_patterns: ["**/*Test*.cs", "**/Tests/**", "**/bin/**", "**/obj/**"]
            },
            'java': {
              framework: "junit5",
              file_extensions: [".java"],
              test_directory: "src/test/java",
              test_suffix: "Test.java",
              exclude_patterns: ["**/test/**", "**/*Test.java", "**/target/**"]
            },
            'javascript': {
              framework: "jest",
              file_extensions: [".js"],
              test_directory: "__tests__",
              test_suffix: ".test.js",
              exclude_patterns: ["**/*.test.js", "**/*.spec.js", "**/node_modules/**"]
            },
            'typescript': {
              framework: "jest",
              file_extensions: [".ts", ".tsx"],
              test_directory: "__tests__",
              test_suffix: ".test.ts",
              exclude_patterns: ["**/*.test.ts", "**/*.spec.ts", "**/node_modules/**", "**/dist/**"]
            },
            'python': {
              framework: "pytest",
              file_extensions: [".py"],
              test_directory: "tests",
              test_suffix: "_test.py",
              exclude_patterns: ["**/*test*.py", "**/tests/**", "**/__pycache__/**"]
            }
          };

          // Base configuration with smart defaults
          const config = {
            enabled: true,
            languages: {},
            ai_settings: {
              model: "gpt-4",
              temperature: 0.1,
              max_tokens: 4000,
              seed: 12345
            },
            limits: {
              max_files_per_request: 20,
              min_file_size_lines: 5,
              max_file_size_lines: 500
            },
            quality: {
              require_docstrings: true,
              mock_external_calls: true,
              include_edge_cases: true,
              generate_integration_tests: false
            }
          };

          // Add detected languages
          languages.forEach(lang => {
            if (languageConfigs[lang]) {
              config.languages[lang] = languageConfigs[lang];
            }
          });

          // Write configuration file
          const yamlStr = yaml.dump(config, {
            flowLevel: -1,
            indent: 2,
            quotingType: '"',
            forceQuotes: false
          });

          const configContent = `# Unit Test Generator Configuration
          # Generated automatically for ${process.env.TARGET_REPO}
          # Generated on: ${new Date().toISOString().split('T')[0]}

          ${yamlStr}
          `;

          fs.writeFileSync('target_repo/.github/unit-test-generator.yml', configContent);
          console.log('‚úÖ Generated unit-test-generator.yml');
          EOF

      - name: Copy workflow and template files
        shell: bash
        run: |
          echo "üìã Copying workflow and template files..."

          # Copy main workflow (always enabled for automatic PR generation)
          cp .github/workflows/unit-test-generator.yml target_repo/.github/workflows/
          echo "‚úÖ Copied unit-test-generator.yml workflow"

          # Copy issue-based generation workflow and templates
          cp .github/workflows/handle-test-generation.yml target_repo/.github/workflows/
          cp .github/ISSUE_TEMPLATE/generate-tests.yml target_repo/.github/ISSUE_TEMPLATE/
          echo "‚úÖ Copied issue-based generation files"

          # Copy scripts and actions
          cp -r .github/scripts/generate-tests.js target_repo/.github/scripts/
          cp -r .github/actions/generate-tests target_repo/.github/actions/
          echo "‚úÖ Copied scripts and actions"

      - name: Create package.json
        shell: bash
        run: |
          cat > target_repo/package.json << 'EOF'
          {
            "name": "unit-test-generator-setup",
            "version": "1.0.0",
            "description": "Dependencies for AI unit test generation",
            "dependencies": {
              "openai": "^4.20.0",
              "@octokit/rest": "^20.0.0",
              "js-yaml": "^4.1.0"
            },
            "engines": {
              "node": ">=18"
            }
          }
          EOF
          echo "‚úÖ Created package.json"

      - name: Create setup documentation
        shell: bash
        env:
          TARGET_REPO: ${{ env.TARGET_REPO }}
          DETECTED_LANGUAGES: ${{ env.DETECTED_LANGUAGES }}
        run: |
          cat > target_repo/UNIT_TEST_GENERATOR_SETUP.md << EOF
          # Unit Test Generator Setup

          This repository has been automatically configured with the AI Unit Test Generator.

          ## Setup Summary

          **Repository:** $TARGET_REPO  
          **Setup Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')  
          **Languages Configured:** $(echo "$DETECTED_LANGUAGES" | tr ',' ', ')

          ## ‚úÖ What Was Installed

          ### Configuration Files
          - \`.github/unit-test-generator.yml\` - Main configuration with smart defaults
          - \`package.json\` - Node.js dependencies for test generation

          ### Workflow Files  
          - \`.github/workflows/unit-test-generator.yml\` - Automatic test generation on PRs
          - \`.github/workflows/handle-test-generation.yml\` - Issue-based test generation

          ### Scripts and Actions
          - \`.github/scripts/generate-tests.js\` - Test generation logic
          - \`.github/actions/generate-tests/\` - Composite action for test generation

          ### Issue Templates
          - \`.github/ISSUE_TEMPLATE/generate-tests.yml\` - Manual test generation requests

          ## üöÄ Next Steps

          ### 1. Add Required Secret
          **This is the only manual step required!**

          1. Go to your repository **Settings** ‚Üí **Secrets and variables** ‚Üí **Actions**
          2. Click **New repository secret**
          3. Name: \`OPENAI_API_KEY\`
          4. Value: Your OpenAI API key
          5. Click **Add secret**

          ### 2. Test the Setup
          1. **Merge this PR** to activate the workflows
          2. **Create a test PR** with some code changes  
          3. **Watch tests generate automatically!** ‚ú®

          ## üìñ How It Works

          ### Automatic Mode (Default)
          - Tests generate automatically when you create or update PRs
          - No manual intervention required
          - Works for all configured languages: $(echo "$DETECTED_LANGUAGES" | tr ',' ', ')

          ### Manual Mode (Optional)
          - Create an issue using the "Generate Unit Tests" template
          - Specify exactly what you want tested
          - Great for generating tests for existing code

          ## ‚öôÔ∏è Customization (Optional)

          The configuration in \`.github/unit-test-generator.yml\` uses smart defaults, but you can customize:

          - **AI Settings:** Model, temperature, response length
          - **Language Frameworks:** Change from defaults if needed  
          - **Quality Requirements:** Test coverage, mocking preferences
          - **Processing Limits:** File size limits, batch sizes

          ## üÜò Need Help?

          - üìñ [Full Documentation](https://github.com/Dave-WestNeu/unit_tests_on_pr)
          - üêõ [Report Issues](https://github.com/Dave-WestNeu/unit_tests_on_pr/issues)

          ---
          
          **Generated by:** [Unit Test Generator App](https://github.com/Dave-WestNeu/unit_tests_on_pr)
          EOF
          echo "‚úÖ Created setup documentation"

      - name: Create pull request
        shell: bash
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
          TARGET_REPO: ${{ env.TARGET_REPO }}
          TARGET_BRANCH: ${{ env.TARGET_BRANCH }}
          DETECTED_LANGUAGES: ${{ env.DETECTED_LANGUAGES }}
        run: |
          cd target_repo

          echo "üîÄ Creating pull request..."

          # Configure git
          git config user.name "Unit Test Generator Bot"
          git config user.email "unit-test-bot@github.com"

          # Create setup branch
          setup_branch="unit-test-generator-setup-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$setup_branch"

          # Add all files
          git add .

          # Check if there are changes
          if git diff --staged --quiet; then
            echo "‚ùå No changes to commit"
            exit 1
          fi

          # Commit changes
          git commit -m "ü§ñ Setup Unit Test Generator

          Automated setup for AI-powered unit test generation:

          ‚úÖ Languages: $(echo "$DETECTED_LANGUAGES" | tr ',' ', ')
          ‚úÖ Automatic PR test generation
          ‚úÖ Issue-based test generation  
          ‚úÖ Smart configuration defaults
          ‚úÖ Complete documentation

          Next step: Add OPENAI_API_KEY to repository secrets"

          # Push branch
          git push origin "$setup_branch"

          # Create PR body
          cat > pr_body.md << PRBODY
          ## ü§ñ Unit Test Generator Setup Complete!

          This PR automatically configures your repository with **AI-powered unit test generation**.

          ### ‚ú® What's Included

          | Component | Description |
          |-----------|-------------|
          | **Configuration** | Smart defaults for $(echo "$DETECTED_LANGUAGES" | tr ',' ', ') |
          | **Workflows** | Automatic PR testing + manual issue-based generation |
          | **Scripts & Actions** | Complete test generation system |
          | **Documentation** | Setup guide and usage instructions |

          ### üöÄ One Step to Complete Setup

          After merging this PR:

          1. **Add Secret**: Go to Settings ‚Üí Secrets ‚Üí Add \`OPENAI_API_KEY\`
          2. **That's it!** Create a PR and watch tests generate automatically ‚ú®

          ### üîç Auto-Detected Configuration

          **Languages:** $(echo "$DETECTED_LANGUAGES" | tr ',' ', ')
          
          $(echo "$DETECTED_LANGUAGES" | tr ',' '\n' | while read lang; do
            case $lang in
              csharp) echo "- **C#** ‚Üí xUnit framework, Tests/ directory" ;;
              java) echo "- **Java** ‚Üí JUnit 5, src/test/java/ directory" ;;
              javascript) echo "- **JavaScript** ‚Üí Jest framework, __tests__/ directory" ;;
              typescript) echo "- **TypeScript** ‚Üí Jest framework, __tests__/ directory" ;;
              python) echo "- **Python** ‚Üí pytest framework, tests/ directory" ;;
            esac
          done)

          ### üìñ How It Works

          1. **Automatic Mode**: Tests generate on every PR automatically
          2. **Manual Mode**: Create issues to generate specific tests
          3. **Smart Defaults**: No configuration needed to get started
          4. **Fully Customizable**: Edit \`.github/unit-test-generator.yml\` if needed

          ### üÜò Need Help?

          - üìñ See \`UNIT_TEST_GENERATOR_SETUP.md\` for complete instructions
          - üêõ [Report issues](https://github.com/Dave-WestNeu/unit_tests_on_pr/issues)

          ---
          
          ü§ñ Generated by [Unit Test Generator App](https://github.com/Dave-WestNeu/unit_tests_on_pr)
          PRBODY

          # Create PR via GitHub API
          pr_response=$(curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$TARGET_REPO/pulls" \
            -d "{
              \"title\": \"ü§ñ Setup Unit Test Generator\",
              \"head\": \"$setup_branch\",
              \"base\": \"$TARGET_BRANCH\",
              \"body\": $(cat pr_body.md | jq -Rs .)
            }")

          pr_number=$(echo "$pr_response" | jq -r '.number // empty')
          pr_url=$(echo "$pr_response" | jq -r '.html_url // empty')

          if [ -n "$pr_number" ] && [ "$pr_number" != "null" ]; then
            echo "PR_NUMBER=$pr_number" >> $GITHUB_ENV
            echo "PR_URL=$pr_url" >> $GITHUB_ENV
            echo "‚úÖ Created PR #$pr_number: $pr_url"
          else
            echo "‚ùå Failed to create PR"
            echo "Response: $pr_response"
            exit 1
          fi

      - name: Handle setup errors
        if: failure()
        shell: bash
        env:
          TARGET_REPO: ${{ env.TARGET_REPO }}
        run: |
          echo "‚ùå Setup failed for $TARGET_REPO"
          echo "Common issues and solutions:" >> setup-error.md
          echo "- **Repository not found**: Check repository name format (owner/repo)" >> setup-error.md
          echo "- **Access denied**: Verify GitHub App has access to target repository" >> setup-error.md  
          echo "- **Invalid branch**: Check that target branch exists" >> setup-error.md
          echo "- **Missing OpenAI key**: Remember to add OPENAI_API_KEY secret after setup" >> setup-error.md
          echo "" >> setup-error.md
          echo "Need help? [Create an issue](https://github.com/Dave-WestNeu/unit_tests_on_pr/issues)" >> setup-error.md

          cat setup-error.md

      - name: Update issue on success
        if: success() && github.event_name != 'workflow_dispatch'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        env:
          PR_NUMBER: ${{ env.PR_NUMBER }}
          PR_URL: ${{ env.PR_URL }}
          TARGET_REPO: ${{ env.TARGET_REPO }}
          DETECTED_LANGUAGES: ${{ env.DETECTED_LANGUAGES }}
        with:
          script: |
            const languages = process.env.DETECTED_LANGUAGES.replace(/,/g, ', ');

            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: `## ‚úÖ Setup Complete!

            **Repository:** ${process.env.TARGET_REPO}  
            **Languages:** ${languages}  
            **Pull Request:** [#${process.env.PR_NUMBER}](${process.env.PR_URL})

            ### üöÄ Next Steps:
            1. **Review and merge** PR #${process.env.PR_NUMBER}
            2. **Add \`OPENAI_API_KEY\`** to repository secrets
            3. **Create a test PR** and watch tests generate automatically!

            ### üìñ Documentation:
            - Setup guide: [UNIT_TEST_GENERATOR_SETUP.md](${process.env.PR_URL.replace('/pull/', '/blob/')}/UNIT_TEST_GENERATOR_SETUP.md)
            - Full docs: [Unit Test Generator](https://github.com/Dave-WestNeu/unit_tests_on_pr)`
            });

            await github.rest.issues.update({
              ...context.repo,
              issue_number: context.issue.number,
              state: "closed"
            });

      - name: Update issue on failure  
        if: failure() && github.event_name != 'workflow_dispatch'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        env:
          TARGET_REPO: ${{ env.TARGET_REPO }}
        with:
          script: |
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: `## ‚ùå Setup Failed

            **Repository:** ${process.env.TARGET_REPO}

            ### Common Issues:
            - **Repository not found**: Check repository name format (owner/repo)
            - **Access denied**: Verify GitHub App has access to target repository  
            - **Invalid branch**: Check that target branch exists
            - **Network issues**: Temporary GitHub API issues

            ### Next Steps:
            1. **Check repository access** and permissions
            2. **Verify repository name** format: \`owner/repo-name\`
            3. **Try again** by reopening this issue
            4. **Get help**: [Create a support issue](https://github.com/Dave-WestNeu/unit_tests_on_pr/issues)

            The setup process will automatically retry when you reopen this issue.`
            });