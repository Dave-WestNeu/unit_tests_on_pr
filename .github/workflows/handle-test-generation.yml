# .github/workflows/handle-test-generation.yml
name: Handle Unit Test Generation Request

on:
  issues:
    types: [opened, reopened]
  workflow_dispatch:
    inputs:
      target_repo:
        description: "Target Repository"
        required: true
      target_branch:
        description: "Target Branch"
        required: true
        default: "main"
      languages:
        description: "Languages (comma-separated)"
        required: true
      file_patterns:
        description: "File patterns"
        required: false

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  generate-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || contains(github.event.issue.labels.*.name, 'test-generation')
    
    steps:
      - name: Parse issue data
        id: parse-issue
        if: github.event_name != 'workflow_dispatch'
        run: |
          # Parse the issue body safely
          issue_body="${{ github.event.issue.body }}"
          
          # Extract fields using safer parsing
          target_repo=$(echo "$issue_body" | grep -A1 "### Target Repository" | tail -1 | xargs)
          target_branch=$(echo "$issue_body" | grep -A1 "### Target Branch" | tail -1 | xargs)
          languages=$(echo "$issue_body" | grep -A5 "### Programming Languages" | grep "^-" | sed 's/^- //' | tr '\n' ',' | sed 's/,$//')
          
          echo "target_repo=$target_repo" >> $GITHUB_OUTPUT
          echo "target_branch=$target_branch" >> $GITHUB_OUTPUT
          echo "languages=$languages" >> $GITHUB_OUTPUT

      - name: Set variables
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "TARGET_REPO=${{ github.event.inputs.target_repo }}" >> $GITHUB_ENV
            echo "TARGET_BRANCH=${{ github.event.inputs.target_branch }}" >> $GITHUB_ENV
            echo "LANGUAGES=${{ github.event.inputs.languages }}" >> $GITHUB_ENV
          else
            echo "TARGET_REPO=${{ steps.parse-issue.outputs.target_repo }}" >> $GITHUB_ENV
            echo "TARGET_BRANCH=${{ steps.parse-issue.outputs.target_branch }}" >> $GITHUB_ENV
            echo "LANGUAGES=${{ steps.parse-issue.outputs.languages }}" >> $GITHUB_ENV
          fi

      - name: Generate GitHub App Token
        id: generate-token
        uses: actions/create-github-app-token@31662d64faa4bf014ba2066b4c75bb6b5e6c0898 #v1.11.0
        with:
          app-id: ${{ secrets.UNIT_TEST_APP_ID }}
          private-key: ${{ secrets.UNIT_TEST_APP_KEY }}
          owner: ${{ env.TARGET_REPO }}

      - name: Generate unit tests
        uses: ./.github/actions/generate-tests
        with:
          target-repo: ${{ env.TARGET_REPO }}
          target-branch: ${{ env.TARGET_BRANCH }}
          languages: ${{ env.LANGUAGES }}
          github-token: ${{ steps.generate-token.outputs.token }}
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}

      - name: Update issue
        if: github.event_name != 'workflow_dispatch'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        with:
          script: |
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: `âœ… Unit tests have been generated and a PR has been created in **${{ env.TARGET_REPO }}**.\n\nPlease check the pull request and review the generated tests before merging.`
            });
            
            await github.rest.issues.update({
              ...context.repo,
              issue_number: context.issue.number,
              state: "closed"
            });